<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- http://exceptionalcode.wordpress.com/2010/06/21/visual-studio-app-config-xml-transformation/ -->
  <!-- 20100827 : Fixed bug when using Publish command within Visual Studio -->
  <PropertyGroup>
    <!-- Prevent circular dependency on Build target -->
    <PipelineDependsOnBuild>false</PipelineDependsOnBuild>
    <!-- Override project config file name (By default is set to Web.config) -->
    <ProjectConfigFileName>App.Config</ProjectConfigFileName>
  </PropertyGroup>

  <!-- The transformation target (TransformWebConfig) in this targets file-->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v10.0\Web\Microsoft.Web.Publishing.targets" />

  <!-- Removes the need to set config files Build Action as Content -->
  <ItemGroup>
    <FilesForPackagingFromProject Include="$(ProjectConfigFileName)">
      <DestinationRelativePath>$(ProjectConfigFileName)</DestinationRelativePath>
    </FilesForPackagingFromProject>
  </ItemGroup>

  <!-- Insert transformation targets in the build process -->
  <PropertyGroup>
    <BuildDependsOn>
      TransformWebConfig;
      $(BuildDependsOn);
      CopyTransformedConfig
    </BuildDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <TransformedConfig>$(TransformWebConfigIntermediateLocation)\transformed\App.config</TransformedConfig>
  </PropertyGroup>

  <!-- Copy transformed file to output directory -->
  <Target Name="CopyTransformedConfig" Condition="'$(TargetName)' != ''">
    <Copy Condition="Exists('$(TransformedConfig)')"
          SourceFiles="$(TransformedConfig)"
          DestinationFiles="$(OutputPath)\$(TargetName)$(TargetExt).config" />
    <Copy Condition="Exists('$(TransformedConfig)') And '$(TargetExt)' == '.exe'"
          SourceFiles="$(TransformedConfig)"
          DestinationFiles="$(OutputPath)\$(TargetName).vshost.exe.config" />
  </Target>

  <!-- 
       Override BeforePublish and After Publish to support ClickOnce 
       
       BeforePublish target updates the application manifest file to reflect the
       transformed config file instead of the original one
       
       AfterPublish target replaces the untransformed config file copied to the
       deployment directory with the transformed one
  -->
  <Target Name="BeforePublish">
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="SdkPath" />
    </GetFrameworkSdkPath>
    <Error Condition="'$(SdkPath)' == ''" Text="Unable to find Framework SDK path."></Error>
    <PropertyGroup>
      <MageTool>"$(SdkPath)Bin\NETFX 4.0 Tools\mage.exe"</MageTool>
      <GeneratedManifestFile>$(OutputPath)\$(TargetName)$(TargetExt).manifest</GeneratedManifestFile>
      <GeneratedApplicationFile>$(OutputPath)\$(TargetName).application</GeneratedApplicationFile>
    </PropertyGroup>
    <!-- The *.application file messes with manifest update so hide it from mage tool -->
    <Copy 
      Condition="Exists('$(GeneratedApplicationFile)')"
      SourceFiles="$(GeneratedApplicationFile)" 
      DestinationFiles="$(GeneratedApplicationFile).bak" />
    <Delete 
      Condition="Exists('$(GeneratedApplicationFile)')"
      Files="$(GeneratedApplicationFile)" />
    <!-- Update the manifest in order to reflect the App.config transformation -->
    <Exec Command="$(MageTool) -update $(GeneratedManifestFile)" />
    <Copy
      SourceFiles="$(GeneratedManifestFile)" 
      DestinationFiles="$(IntermediateOutputPath)\$(TargetName)$(TargetExt).manifest" />
    <!-- Restore the *.application file -->
    <Copy 
      Condition="Exists('$(GeneratedApplicationFile).bak')"
      SourceFiles="$(GeneratedApplicationFile).bak" 
      DestinationFiles="$(GeneratedApplicationFile)" />
    <Delete 
      Condition="Exists('$(GeneratedApplicationFile).bak')"
      Files="$(GeneratedApplicationFile).bak" />
  </Target>
  
  <Target Name="AfterPublish">
    <PropertyGroup>
      <DeployedConfig>$(_DeploymentApplicationDir)$(TargetName)$(TargetExt).config$(_DeploymentFileMappingExtension)</DeployedConfig>
    </PropertyGroup>
    <!-- Publish copies the unstransformed App.config to deployment directory so overwrite it -->
    <Copy Condition="Exists('$(DeployedConfig)')" 
          SourceFiles="$(TransformedConfig)" 
          DestinationFiles="$(DeployedConfig)" />
  </Target>
</Project>
